#########################################################################################
# This is the unit testing api for the nurse scheduling problem (NSP)
# implemented in nurse_scheduling_problem.py
# This ensures that the basic functions are working properly
########################################################################################

from nurse_scheduling_porblem import *
import unittest
import random


# Global vars used by various tests
# Set the seed for reproducibility (optional)
random.seed(42)
# To generate a list of random tuples
num_pairs = 1000  # Adjust the number of pairs as needed
min_value = 0
max_value = 1000
test_cases = [(random.randint(min_value, max_value), random.randint(min_value, max_value)) for _ in range(num_pairs)]
unique_test_cases = random.sample([(i, j) for i in range(min_value, max_value+1) for j in range(min_value, max_value+1)], num_pairs)



class TestCompositeIndex(unittest.TestCase):

    def test_unique_mapping(self):
        # Test that the function maps correct x,y and inverses correct,
        # with various (random) pairs of integers.
        print("\ntest_correct_mapping")
        for x, y in test_cases:
            composite_index = get_composite_index(x, y)
            reversed_pair = inverse_composite_index(composite_index)
            self.assertEqual((x, y), reversed_pair, f"Failed for x={x}, y={y}")

    def test_uniqueness(self):
    # Test that the the indices generated by different pairs are unique.
    # Againg using random (unique) pairs.
        print("\ntest_uniqueness") 
        
        indxs = []
        for x, y in unique_test_cases:
            composite_index = get_composite_index(x, y)
            reversed_pair = inverse_composite_index(composite_index)
            self.assertFalse(reversed_pair in indxs)
            indxs.append(reversed_pair)
            
